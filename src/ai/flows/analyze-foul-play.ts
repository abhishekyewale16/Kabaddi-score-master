// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Implements the AnalyzeFoulPlay flow, allowing referees to input a play description and analyze it for potential foul play violations.
 *
 * - analyzeFoulPlay - A function that takes play description and returns an analysis of potential foul play violations.
 * - AnalyzeFoulPlayInput - The input type for the analyzeFoulPlay function, a text description of the play.
 * - AnalyzeFoulPlayOutput - The return type for the analyzeFoulPlay function, containing the analysis result.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnalyzeFoulPlayInputSchema = z.object({
  playDescription: z
    .string()
    .describe('A detailed description of the play to analyze for foul play.'),
});
export type AnalyzeFoulPlayInput = z.infer<typeof AnalyzeFoulPlayInputSchema>;

const AnalyzeFoulPlayOutputSchema = z.object({
  hasFoulPlay: z
    .boolean()
    .describe('Whether or not the play description contains foul play.'),
  analysis: z.string().describe('The analysis of the play, including any violations.'),
});
export type AnalyzeFoulPlayOutput = z.infer<typeof AnalyzeFoulPlayOutputSchema>;

export async function analyzeFoulPlay(input: AnalyzeFoulPlayInput): Promise<AnalyzeFoulPlayOutput> {
  return analyzeFoulPlayFlow(input);
}

const analyzeFoulPlayPrompt = ai.definePrompt({
  name: 'analyzeFoulPlayPrompt',
  input: {schema: AnalyzeFoulPlayInputSchema},
  output: {schema: AnalyzeFoulPlayOutputSchema},
  prompt: `You are an expert Kabaddi referee. You are responsible for analyzing a play and determining whether it contains foul play.

  Analyze the following play description and determine if it contains foul play. Provide a detailed analysis of the play, including any violations.

  Play Description: {{{playDescription}}}

  Respond in JSON format with the hasFoulPlay boolean field and analysis string field.
  `,
});

const analyzeFoulPlayFlow = ai.defineFlow(
  {
    name: 'analyzeFoulPlayFlow',
    inputSchema: AnalyzeFoulPlayInputSchema,
    outputSchema: AnalyzeFoulPlayOutputSchema,
  },
  async input => {
    const {output} = await analyzeFoulPlayPrompt(input);
    return output!;
  }
);
